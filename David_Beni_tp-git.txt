David
Beni
SIO 1A
SISR


Ouvrir un terminal (terminal Git Bash à privilégier)
	

Créer, en ligne de commande, un répertoiretp-git
	mkdir tp-git 
Se déplacer dans le répertoire
	cd tp-git
Vérifier qu'on est dans le bon répertoire en démultipliant le chemin du répertoire courant
	c/:
Initialiser un dépôt Git
	git init
Lister tous les fichiers du répertoire (y compris les fichiers cachés) pour s'assurer que le répertoire .gità été créé
	ls -a 
Ouvrir ce répertoire sous VS Code
	
Exécuter git statuset copier/coller la sortie
	git status
	On branch master

No commits yet

nothing to commit (create/copy files and use "git add" to track)


Créer le fichier fichier1.mdavec un contenu quelconque et sl'enregistrer
	touch fichier1.md

Créer le fichier fichier2.mdavec un contenu quelconque et l'enregistrer
	touch fichier2.md

Exécuter git statuset copier/coller la sortie
	git satus
	On branch master
No commits yet

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        fichier1.md
        fichier2.md

nothing added to commit but untracked files present (use "git add" to track)


Ajouter fichier1.mdà l'index de Git (zone de Staging )
	git add fichier1.md

Exécuter git statuset copier/coller la sortie
	git status
	On branch master

No commits yet

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)
        new file:   fichier1.md

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        fichier2.md


Créer un commit avec pour message : "Ajout de fichier1.md"
	git commit -m "Ajout de fichier1.md"

Exécuter git statuset copier/coller la sortie
	git status
	On branch master
Untracked files:
  (use "git add <file>..." to include in what will be committed)
        fichier2.md

nothing added to commit but untracked files present (use "git add" to track)


Modifier fichier1.mdet enregistrer
	nano fichier1.md
	ctrl+j
	ctrl+x
	y
	enter

Exécuter git statuset copier/coller la sortie
	

Ajouter fichier1.mdet fichier2.mdà la zone de Staging

Créer un commit "Ajout de fichier2.md et modification de fichier1.md"

Copier/coller l'ID des deux premiers s'engage :

ID commit 1 :

ID commit 2 :

Que signifie qu'un fichier est " tracked " ou " untracked " ?

Pourquoi doit-on passer les fichiers par la zone de Staging (l'index) avant de les committer ?

Créer une succursalefonctionnalite1

Lister les succursales

Se déplacer sur la branchefonctionnalite1

Lister les succursales

Que représente l'étoile à côté des noms des succursales ?

Créer un nouveau fichierfichier3.md

Modifier le fichierfichier2.md


Comment utiliser VS Code pour qu'il nous montre les différences entre l'ancienne version de fichier2.mdet la version courante que l'on vient d'éditer ?

Commettre ces deux modifications : "Fonctionnalité 1 - première phase"

Créer un nouveau fichierfichier4.md

Modifier de nouveau le fichierfichier2.md

Commettre ces deux modifications : "Fonctionnalité 1 - terminée"

Afficher la liste des fichiers du répertoire

Se déplacer sur la branchemaster

Afficher la liste des fichiers du répertoire

Pourquoi les deux sorties sont-elles différentes ? Les fichiers ont-ils disparu ?

Créer une nouvelle succursalefonctionnalite2

Cette branche ne va pas avoir toutes les données incluses dans fonctionnalite1. Pourquoi ?

Qu'aurait-il fallu faire si on avait recommandé de démarrer la branche fonctionnalite2en intégrant les modifications récentes de fonctionnalite1 ?

Se déplacer sur la nouvelle succursalefonctionnalite2

Créer un nouveau fichierfichier5.md

Faire un commit en incluant cet ajout : "Ajout fichier5.md"

Entrer la commande git log --oneline --decorate --graph --allpour visualiser, sur le terminal, le graphe des commits sur toutes les branches

Noter la « déviation » entre les deux branches, à partir de la branchemaster

Installer l'extension VS Code Git Graph et visualiser le graphe actuel des commits à l'aide de cette extension

Sur cette représentation, que représente les points ?

Comment voit-on sur quelle branche on est actuellement ?

On considère que la branche originale ( masterou main) est la branche d'intégration, c'est-à-dire celle qui va contenir l'historique de toutes les modifications développées au fur et à mesure dans les branches annexes

On va maintenant fusionner la branche fonctionnalite1, qui est terminée, avec la branche d'intégration

Se déplacer sur la branchemaster

Notez le changement dans l'onglet Git Graph

Fusionner avec la branchefonctionnalite1

Notez le changement dans l'onglet Git Graph . Que signifie la mention Avance rapide indiquée par la sortie de la commande ?

On veut maintenant fusionner fonctionnalite2dans la branche d'intégration ( master)

Faire cette fusion

Notez le changement dans l'onglet Git Graph . Que signifie la mention Fusion faite par le ... stratégie indiquée par la sortie de la commande ?

Quelle est la différence fondamentale avec la fusion précédente ?

Créer une nouvelle branche fonctionnalite3, se déplacer au-dessus, et modifier le fichier fichier1.mden y ajoutant une ligne de texte. Committeur : "Modification fichier1 pour fonctionnalité 3"

Comment utiliser Git Graph pour qu'il nous montre les différences entre l'ancienne version de fichier1.mdet la version courante que l'on vient de committer ?

Repartir sur master, et modifier fichier1.mden y ajoutant aussi une ligne (différente de celle qu'on a ajoutée sur l'autre branche)

Tenter de fusionner la branche fonctionnalite3avecmaster

Que se passe-t-il et pourquoi ?

Lancer ungit status

Que doit-on faire si on veut annuler la fusion en cours ?

On veut résoudre le conflit. Plusieurs possibilités :

Conserver uniquement les modifications faites dansfonctionnalite3

Conserver uniquement les modifications faites dansmaster

Conserver les deux modifications

Supprimez les deux modifications ou remaniez le fichier pour les insérer correctement

Git nous laisse totalement la main et ne va pas essayer d'imposer l'un de ces choix pour nous, ni nous assister dans l'application automatique de l'un d'entre eux : il faut examiner le(s) fichier(s ) en conflit et éditer nous-mêmes

Ouvrir le fichier en question sous VS Code

La chaîne <<<<<<<<<<marque le début du conflit

La chaîne >>>>>>>>>>marque la fin du conflit

La chaîne ==========sépare les deux versions

Éditer le fichier pour faire en sorte d'intégrer les deux modifications ; à la fin de l'édition :

Sauvegarder

Il ne doit plus y avoir de marques quelconques en dehors des ajouts fonctionnels originaux, c'est-à-dire pas de <<<<<<<<<<, ni de mentions de nom de branche, etc. : vous rendez le fichier tel qu'il doit apparaître dans le commit de fusion, avec les conflits résolus manuellement

Ajouter les modifications à l'index et committer

NB : parfois, plusieurs fichiers sont en conflit ; le processus est identique, il faut juste résoudre les conflits sur tous les fichiers

NB : les conflits de fusion sont fréquents lorsqu'on travaille en collaboration (plusieurs personnes vont travailler sur le même fichier pour remplir deux fonctionnalités différentes)

Les branches créées n'ont plus de raison d'exister

Elles avaient pour mais de créer une déviation afin de travailler sur des fonctionnalités individuelles

On va vouloir nettoyer le dépôt en les supprimant

Cela ne va bien sûr pas supprimer tous les commits qui y sont associés

Attention cependant d'éviter en général de supprimer une branche qui n'a pas encore été intégrée à la branche d'intégration, sauf on souhaite vraiment abandonner le développement de cette branche

Ne pas réutiliser une branche qui a déjà été intégrée pour démarrer une nouvelle piste : toujours utiliser une nouvelle branche

Nouvelle tâche ? => nouvelle branche à partir d'un commit de la branche d'intégration (en général le plus récent)

Tâche terminée ? => fusion dans la branche d'intégration et suppression de la branche

Supprimer les trois branches fonctionnalitex(attention : on ne peut pas supprimer une branche sur laquelle on est)

